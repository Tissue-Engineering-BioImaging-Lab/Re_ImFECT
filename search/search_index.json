{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Overview Texture Analysis Basic Requisites The code for the ImFECT project is kept in ImFECT . In order to execute the texture analysis software you need to setup a Python Virtual Environment ImageJ Samples Examples License The ImFECT is under The MIT License Opensource-license . Copyright 2023 - Leila Mosta\u00e7o Guidolin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#overview","text":"","title":"Overview"},{"location":"#texture-analysis","text":"","title":"Texture Analysis"},{"location":"#basic-requisites","text":"The code for the ImFECT project is kept in ImFECT . In order to execute the texture analysis software you need to setup a Python Virtual Environment","title":"Basic Requisites"},{"location":"#imagej","text":"","title":"ImageJ"},{"location":"#samples","text":"","title":"Samples"},{"location":"#examples","text":"","title":"Examples"},{"location":"#license","text":"The ImFECT is under The MIT License Opensource-license . Copyright 2023 - Leila Mosta\u00e7o Guidolin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"fiji/","text":"ImageJ Welcome to the ImageJ/Fiji Installation and Package Management Guide! In this guide, we'll walk you through the installation, uninstallation, usage, adding, and removing packages for ImageJ/Fiji on Windows, macOS, and Linux. We'll make it easy to understand with step-by-step examples. Table of Contents ImageJ Table of Contents Installation Windows macOS Linux Uninstallation Windows macOS Linux Usage Adding Packages Removing Packages Installation Windows Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Install ImageJ/Fiji: Run the downloaded installer and follow the installation instructions. macOS Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Install ImageJ/Fiji: Open the downloaded .dmg file, and then drag the ImageJ/Fiji application to your Applications folder. Linux Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Extract and Install ImageJ/Fiji: Using Terminal: bash tar -xvzf Fiji.app.tar.gz cd Fiji.app ./ImageJ-linux64 Using GUI: Extract the downloaded archive and run the ImageJ-linux64 executable. Uninstallation Windows Uninstall ImageJ/Fiji: Open the Windows Control Panel, navigate to \"Programs,\" and select \"Uninstall a program.\" Find ImageJ/Fiji and uninstall it. macOS Uninstall ImageJ/Fiji: Drag the ImageJ/Fiji application from your Applications folder to the Trash. Linux Uninstall ImageJ/Fiji: Simply delete the ImageJ/Fiji directory that you extracted. Usage After installing ImageJ/Fiji, launch the application. You'll see the ImageJ/Fiji user interface. You can now use the powerful image processing and analysis features provided by ImageJ/Fiji. Adding Packages ImageJ/Fiji uses a plugin system to add functionality. Here's how to add a package (plugin): Open ImageJ/Fiji. Click on \"Help\" > \"Update...\". In the \"ImageJ Updater\" dialog, click on the \"Manage update sites\" button. Enable the update sites that contain the packages you want to install. Click \"Close,\" and you will be prompted to restart ImageJ/Fiji. After restarting, the packages from the enabled update sites will be available in ImageJ/Fiji. Removing Packages To remove a package (plugin) in ImageJ/Fiji: Open ImageJ/Fiji. Click on \"Help\" > \"Update...\". In the \"ImageJ Updater\" dialog, click on the \"Manage update sites\" button. Disable the update sites that contain the packages you want to uninstall. Click \"Close,\" and you will be prompted to restart ImageJ/Fiji. After restarting, the disabled packages will be removed from ImageJ/Fiji. Congratulations! You've successfully installed, managed, and used ImageJ/Fiji on your system. Enjoy image processing and analysis!","title":"Fiji"},{"location":"fiji/#imagej","text":"Welcome to the ImageJ/Fiji Installation and Package Management Guide! In this guide, we'll walk you through the installation, uninstallation, usage, adding, and removing packages for ImageJ/Fiji on Windows, macOS, and Linux. We'll make it easy to understand with step-by-step examples.","title":"ImageJ"},{"location":"fiji/#table-of-contents","text":"ImageJ Table of Contents Installation Windows macOS Linux Uninstallation Windows macOS Linux Usage Adding Packages Removing Packages","title":"Table of Contents"},{"location":"fiji/#installation","text":"","title":"Installation"},{"location":"fiji/#windows","text":"Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Install ImageJ/Fiji: Run the downloaded installer and follow the installation instructions.","title":"Windows"},{"location":"fiji/#macos","text":"Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Install ImageJ/Fiji: Open the downloaded .dmg file, and then drag the ImageJ/Fiji application to your Applications folder.","title":"macOS"},{"location":"fiji/#linux","text":"Download ImageJ/Fiji: Visit the official website at https://imagej.net/Fiji/Downloads . Extract and Install ImageJ/Fiji: Using Terminal: bash tar -xvzf Fiji.app.tar.gz cd Fiji.app ./ImageJ-linux64 Using GUI: Extract the downloaded archive and run the ImageJ-linux64 executable.","title":"Linux"},{"location":"fiji/#uninstallation","text":"","title":"Uninstallation"},{"location":"fiji/#windows_1","text":"Uninstall ImageJ/Fiji: Open the Windows Control Panel, navigate to \"Programs,\" and select \"Uninstall a program.\" Find ImageJ/Fiji and uninstall it.","title":"Windows"},{"location":"fiji/#macos_1","text":"Uninstall ImageJ/Fiji: Drag the ImageJ/Fiji application from your Applications folder to the Trash.","title":"macOS"},{"location":"fiji/#linux_1","text":"Uninstall ImageJ/Fiji: Simply delete the ImageJ/Fiji directory that you extracted.","title":"Linux"},{"location":"fiji/#usage","text":"After installing ImageJ/Fiji, launch the application. You'll see the ImageJ/Fiji user interface. You can now use the powerful image processing and analysis features provided by ImageJ/Fiji.","title":"Usage"},{"location":"fiji/#adding-packages","text":"ImageJ/Fiji uses a plugin system to add functionality. Here's how to add a package (plugin): Open ImageJ/Fiji. Click on \"Help\" > \"Update...\". In the \"ImageJ Updater\" dialog, click on the \"Manage update sites\" button. Enable the update sites that contain the packages you want to install. Click \"Close,\" and you will be prompted to restart ImageJ/Fiji. After restarting, the packages from the enabled update sites will be available in ImageJ/Fiji.","title":"Adding Packages"},{"location":"fiji/#removing-packages","text":"To remove a package (plugin) in ImageJ/Fiji: Open ImageJ/Fiji. Click on \"Help\" > \"Update...\". In the \"ImageJ Updater\" dialog, click on the \"Manage update sites\" button. Disable the update sites that contain the packages you want to uninstall. Click \"Close,\" and you will be prompted to restart ImageJ/Fiji. After restarting, the disabled packages will be removed from ImageJ/Fiji. Congratulations! You've successfully installed, managed, and used ImageJ/Fiji on your system. Enjoy image processing and analysis!","title":"Removing Packages"},{"location":"git/","text":"Git Welcome to the Git User Guide! In this guide, we'll walk you through common Git operations, including installation, uninstallation, basic commands, branch management, committing, fetching, pulling, pushing, creating a merge request in GitLab, and merging branches. Table of Contents Git Table of Contents What is Git ? And why we use it ? Disclamer Installation Installation via Package Manager Uninstall Basic Git Commands Add Commit Status Log Branch Management Create and Switch Branches Squash Commits Remote Repository Interaction Fetch Pull Push Create a Merge Request in GitLab Merge Two Branches What is Git ? And why we use it ? Git is a distributed version control system (DVCS) that is widely used in software development and other fields to track and manage changes to source code and other files. It was created by Linus Torvalds in 2005 and has since become ~~one of~~ the most popular version control systems in the world. Here are some key concepts and features of Git: Version Control : Git allows you to track changes to your project's files over time. It records a history of all modifications, who made them, and when they were made. Distributed : Git is a distributed version control system, which means that every developer working on a project has a full copy of the entire repository, including its history. This enables developers to work independently, even when they are not connected to a central server. Branching and Merging : Git makes it easy to create branches, which are separate lines of development. Developers can work on features or bug fixes in their own branches and then merge their changes back into the main branch when they are ready. Collaboration : Git facilitates collaboration among developers. Multiple people can work on the same project simultaneously, and Git helps manage conflicts when multiple changes overlap. Remote Repositories : Git supports remote repositories, allowing teams to work together on a project, even when team members are in different locations. Popular hosting services like GitHub, GitLab, and Bitbucket provide a platform for hosting Git repositories in the cloud. Commit History : Git maintains a detailed commit history that includes information about each change, such as the author, date, and a commit message explaining the purpose of the change. Revert and Rollback : Git allows you to easily revert to previous versions of your project if a mistake is made or if you need to go back to an earlier state. Security and Integrity : Git uses cryptographic hashes to ensure the integrity of your project's history. This means that once data is committed to a Git repository, it cannot be changed without leaving a trace. Open Source : Git is open source software and is available for free. It has a large and active community of users and contributors who continue to improve and extend its functionality. Git is an essential tool for software development but is also used in various other domains where version control and change tracking are important, such as documentation, configuration management, and more. Learning how to use Git effectively is a valuable skill for anyone involved in collaborative or versioned work. Disclamer If you prefer not to use git in the terminal or if you don't feel confidant enough to using the terminal, we higly recommend using sublime-merge . It offers a user interface for git, that make it easier to understand and use all the git commands. Installation If you haven't already installed Git, follow these steps: Download Git for your specific platform from https://git-scm.com/downloads . Run the installer and follow the installation instructions. To verify that Git is installed, open your terminal/command prompt and run: bash git --version You should see the Git version you installed. Installation via Package Manager On Debian-based distributions like Ubuntu, you can use the apt package manager to install Git: sudo apt update sudo apt install git Uninstall If you ever need to uninstall Git, follow these steps based on your platform: Windows: Use the \"Add or Remove Programs\" feature in the Control Panel to uninstall Git. macOS: You can uninstall Git using Homebrew by running: bash brew uninstall git Linux: Use your system's package manager to uninstall Git. For example, on Ubuntu: bash sudo apt-get remove git Basic Git Commands Add Git allows you to selectively choose which changes you want to include in the next commit. This process is called \"staging.\" You use the git add command to stage changes. git add filename Commit A \"commit\" refers to a fundamental operation that records changes to a set of files in a repository. When you make changes to files within a Git repository. Commits are the building blocks of a Git repository's history. They allow you to track changes over time, collaborate with others, and easily revert to previous states of your project if needed. To save your changes to the repository, use the following command: git commit -m \"Your commit message\" This command commits your changes to the current branch with a descriptive message. Status To check the status of your working directory, including untracked and modified files, use: git status This command helps you keep track of changes in your repository. Log To view the commit history, use: git log This command displays a list of commits, including their messages and authors. Branch Management Create and Switch Branches Branches in Git provide a powerful way to organize and manage development efforts, enabling parallel work, experimentation, code review, and the ability to address issues and features in an organized and controlled manner. They help maintain code stability and facilitate efficient collaboration among developers. To create a new branch and switch to it, use: git checkout -b new-branch-name This command creates a new branch and switches to it. Alternativelly, if you wish to just create a new branch, use: git branch new-branch-name Squash Commits To combine multiple commits into a single commit, use an interactive rebase: git rebase -i HEAD~n Replace n with the number of commits you want to squash. Follow the interactive rebase instructions to squash the commits. Remote Repository Interaction Fetch To update your local repository with changes from the remote repository, use: git fetch This command fetches changes without automatically merging them into your local branch. Pull To fetch and merge changes from the remote repository into your current branch, use: git pull This command updates your local branch with remote changes. Push To push your local changes to the remote repository, use: git push This command uploads your local commits to the remote repository. Create a Merge Request in GitLab Go to your GitLab repository on the GitLab website. Click on the \"Merge Requests\" tab. Click the \"New Merge Request\" button. Select the source branch and target branch for the merge request. Add a title and description for your merge request. Click the \"Submit merge request\" button. Merge Two Branches To merge two branches (e.g., feature-branch into main), you can use the following steps: Checkout the target branch (e.g., main): bash git checkout main Merge the source branch (e.g., feature-branch) into the target branch: bash git merge feature-branch Resolve any merge conflicts if they occur. Commit the merge: bash git commit -m \"Merge feature-branch into main\" Push the changes to the remote repository: bash git push That's it! You're now equipped with essential Git commands and GitLab operations to manage your Git repositories. Happy coding and collaborating!","title":"Git"},{"location":"git/#git","text":"Welcome to the Git User Guide! In this guide, we'll walk you through common Git operations, including installation, uninstallation, basic commands, branch management, committing, fetching, pulling, pushing, creating a merge request in GitLab, and merging branches.","title":"Git"},{"location":"git/#table-of-contents","text":"Git Table of Contents What is Git ? And why we use it ? Disclamer Installation Installation via Package Manager Uninstall Basic Git Commands Add Commit Status Log Branch Management Create and Switch Branches Squash Commits Remote Repository Interaction Fetch Pull Push Create a Merge Request in GitLab Merge Two Branches","title":"Table of Contents"},{"location":"git/#what-is-git-and-why-we-use-it","text":"Git is a distributed version control system (DVCS) that is widely used in software development and other fields to track and manage changes to source code and other files. It was created by Linus Torvalds in 2005 and has since become ~~one of~~ the most popular version control systems in the world. Here are some key concepts and features of Git: Version Control : Git allows you to track changes to your project's files over time. It records a history of all modifications, who made them, and when they were made. Distributed : Git is a distributed version control system, which means that every developer working on a project has a full copy of the entire repository, including its history. This enables developers to work independently, even when they are not connected to a central server. Branching and Merging : Git makes it easy to create branches, which are separate lines of development. Developers can work on features or bug fixes in their own branches and then merge their changes back into the main branch when they are ready. Collaboration : Git facilitates collaboration among developers. Multiple people can work on the same project simultaneously, and Git helps manage conflicts when multiple changes overlap. Remote Repositories : Git supports remote repositories, allowing teams to work together on a project, even when team members are in different locations. Popular hosting services like GitHub, GitLab, and Bitbucket provide a platform for hosting Git repositories in the cloud. Commit History : Git maintains a detailed commit history that includes information about each change, such as the author, date, and a commit message explaining the purpose of the change. Revert and Rollback : Git allows you to easily revert to previous versions of your project if a mistake is made or if you need to go back to an earlier state. Security and Integrity : Git uses cryptographic hashes to ensure the integrity of your project's history. This means that once data is committed to a Git repository, it cannot be changed without leaving a trace. Open Source : Git is open source software and is available for free. It has a large and active community of users and contributors who continue to improve and extend its functionality. Git is an essential tool for software development but is also used in various other domains where version control and change tracking are important, such as documentation, configuration management, and more. Learning how to use Git effectively is a valuable skill for anyone involved in collaborative or versioned work.","title":"What is Git ? And why we use it ?"},{"location":"git/#disclamer","text":"If you prefer not to use git in the terminal or if you don't feel confidant enough to using the terminal, we higly recommend using sublime-merge . It offers a user interface for git, that make it easier to understand and use all the git commands.","title":"Disclamer"},{"location":"git/#installation","text":"If you haven't already installed Git, follow these steps: Download Git for your specific platform from https://git-scm.com/downloads . Run the installer and follow the installation instructions. To verify that Git is installed, open your terminal/command prompt and run: bash git --version You should see the Git version you installed.","title":"Installation"},{"location":"git/#installation-via-package-manager","text":"On Debian-based distributions like Ubuntu, you can use the apt package manager to install Git: sudo apt update sudo apt install git","title":"Installation via Package Manager"},{"location":"git/#uninstall","text":"If you ever need to uninstall Git, follow these steps based on your platform: Windows: Use the \"Add or Remove Programs\" feature in the Control Panel to uninstall Git. macOS: You can uninstall Git using Homebrew by running: bash brew uninstall git Linux: Use your system's package manager to uninstall Git. For example, on Ubuntu: bash sudo apt-get remove git","title":"Uninstall"},{"location":"git/#basic-git-commands","text":"","title":"Basic Git Commands"},{"location":"git/#add","text":"Git allows you to selectively choose which changes you want to include in the next commit. This process is called \"staging.\" You use the git add command to stage changes. git add filename","title":"Add"},{"location":"git/#commit","text":"A \"commit\" refers to a fundamental operation that records changes to a set of files in a repository. When you make changes to files within a Git repository. Commits are the building blocks of a Git repository's history. They allow you to track changes over time, collaborate with others, and easily revert to previous states of your project if needed. To save your changes to the repository, use the following command: git commit -m \"Your commit message\" This command commits your changes to the current branch with a descriptive message.","title":"Commit"},{"location":"git/#status","text":"To check the status of your working directory, including untracked and modified files, use: git status This command helps you keep track of changes in your repository.","title":"Status"},{"location":"git/#log","text":"To view the commit history, use: git log This command displays a list of commits, including their messages and authors.","title":"Log"},{"location":"git/#branch-management","text":"","title":"Branch Management"},{"location":"git/#create-and-switch-branches","text":"Branches in Git provide a powerful way to organize and manage development efforts, enabling parallel work, experimentation, code review, and the ability to address issues and features in an organized and controlled manner. They help maintain code stability and facilitate efficient collaboration among developers. To create a new branch and switch to it, use: git checkout -b new-branch-name This command creates a new branch and switches to it. Alternativelly, if you wish to just create a new branch, use: git branch new-branch-name","title":"Create and Switch Branches"},{"location":"git/#squash-commits","text":"To combine multiple commits into a single commit, use an interactive rebase: git rebase -i HEAD~n Replace n with the number of commits you want to squash. Follow the interactive rebase instructions to squash the commits.","title":"Squash Commits"},{"location":"git/#remote-repository-interaction","text":"","title":"Remote Repository Interaction"},{"location":"git/#fetch","text":"To update your local repository with changes from the remote repository, use: git fetch This command fetches changes without automatically merging them into your local branch.","title":"Fetch"},{"location":"git/#pull","text":"To fetch and merge changes from the remote repository into your current branch, use: git pull This command updates your local branch with remote changes.","title":"Pull"},{"location":"git/#push","text":"To push your local changes to the remote repository, use: git push This command uploads your local commits to the remote repository.","title":"Push"},{"location":"git/#create-a-merge-request-in-gitlab","text":"Go to your GitLab repository on the GitLab website. Click on the \"Merge Requests\" tab. Click the \"New Merge Request\" button. Select the source branch and target branch for the merge request. Add a title and description for your merge request. Click the \"Submit merge request\" button.","title":"Create a Merge Request in GitLab"},{"location":"git/#merge-two-branches","text":"To merge two branches (e.g., feature-branch into main), you can use the following steps: Checkout the target branch (e.g., main): bash git checkout main Merge the source branch (e.g., feature-branch) into the target branch: bash git merge feature-branch Resolve any merge conflicts if they occur. Commit the merge: bash git commit -m \"Merge feature-branch into main\" Push the changes to the remote repository: bash git push That's it! You're now equipped with essential Git commands and GitLab operations to manage your Git repositories. Happy coding and collaborating!","title":"Merge Two Branches"},{"location":"license/","text":"MIT License Copyright (c) 2023 Tissue-Engineering-BioImaging-Lab Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"","title":"MIT License"},{"location":"license/#copyright-c-2023-tissue-engineering-bioimaging-lab","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright (c) 2023 Tissue-Engineering-BioImaging-Lab"},{"location":"samples/","text":"","title":"Samples"},{"location":"teb_teamhub/","text":"","title":"TEB_TEAMHub"},{"location":"texture_analysis/","text":"","title":"Texture_Analysis"},{"location":"virtualenv/","text":"Python Virtual Environment Python Virtual Environment 1. Introduction: 2. Overview: 3. Installation: 4. Creating Virtual Environments: 5. Activating the Virtual Environment: 6. Installing python requirements: 7. Deactivating the Virtual Environment: Additional Resources:** 1. Introduction: This documentation serves as a guide to using Python Virtual Environment (virtualenv). Python Virtual Environment simplifies managing project dependencies by creating isolated environments. 2. Overview: Python Virtual Environment is a tool that helps manage multiple Python projects by creating isolated environments for each, preventing conflicts between project dependencies. - Isolation of project dependencies. - Easy installation and management of project-specific packages. - Facilitates version control of Python and its libraries. 3. Installation: Make sure that your are using Python (preferably Python 3.3 or newer) and have Pip (Python package installer) installed in your system. Installation Steps: bash pip install virtualenv 4. Creating Virtual Environments: We strongly recommend creating a virtualenv to execute and maintain the `imfect`` project. Command: bash virtualenv re_imfect 5. Activating the Virtual Environment: When you activate your virtual environment, your local environment changes the python binaries that from of your system to the local virtual environment. This step is necessary to garantee that you are using the correct modules and version required to run this project. On Unix or MacOS: bash source re_imfect/bin/activate On Windows: bash .\\env\\Scripts\\activate Activated Environment: The command prompt should change, indicating the active virtual environment. 6. Installing python requirements: This step is responsible for installing all the required dependencies, packages, and modules that the project uses. First make sure that you are using the virtualenv python Which Python? bash which python3 The results should be something in the lines of /home/.../re_imfect/bin/python3 Usage: Install: bash pip install -r requirements.txt 7. Deactivating the Virtual Environment: Deactivating the virtualend allows you to use the system default python3 binaries. on Linux: bash deactivate Notes: Returns to the global Python environment. The command prompt should revert to its original state. Which Python? bash which python3 The result now should be /usr/bin/python3 Additional Resources:** Additional documentation can be foudn in the Official Documentation .","title":"Virtual_Env"},{"location":"virtualenv/#python-virtual-environment","text":"Python Virtual Environment 1. Introduction: 2. Overview: 3. Installation: 4. Creating Virtual Environments: 5. Activating the Virtual Environment: 6. Installing python requirements: 7. Deactivating the Virtual Environment: Additional Resources:**","title":"Python Virtual Environment"},{"location":"virtualenv/#1-introduction","text":"This documentation serves as a guide to using Python Virtual Environment (virtualenv). Python Virtual Environment simplifies managing project dependencies by creating isolated environments.","title":"1. Introduction:"},{"location":"virtualenv/#2-overview","text":"Python Virtual Environment is a tool that helps manage multiple Python projects by creating isolated environments for each, preventing conflicts between project dependencies. - Isolation of project dependencies. - Easy installation and management of project-specific packages. - Facilitates version control of Python and its libraries.","title":"2. Overview:"},{"location":"virtualenv/#3-installation","text":"Make sure that your are using Python (preferably Python 3.3 or newer) and have Pip (Python package installer) installed in your system. Installation Steps: bash pip install virtualenv","title":"3. Installation:"},{"location":"virtualenv/#4-creating-virtual-environments","text":"We strongly recommend creating a virtualenv to execute and maintain the `imfect`` project. Command: bash virtualenv re_imfect","title":"4. Creating Virtual Environments:"},{"location":"virtualenv/#5-activating-the-virtual-environment","text":"When you activate your virtual environment, your local environment changes the python binaries that from of your system to the local virtual environment. This step is necessary to garantee that you are using the correct modules and version required to run this project. On Unix or MacOS: bash source re_imfect/bin/activate On Windows: bash .\\env\\Scripts\\activate Activated Environment: The command prompt should change, indicating the active virtual environment.","title":"5. Activating the Virtual Environment:"},{"location":"virtualenv/#6-installing-python-requirements","text":"This step is responsible for installing all the required dependencies, packages, and modules that the project uses. First make sure that you are using the virtualenv python Which Python? bash which python3 The results should be something in the lines of /home/.../re_imfect/bin/python3 Usage: Install: bash pip install -r requirements.txt","title":"6. Installing python requirements:"},{"location":"virtualenv/#7-deactivating-the-virtual-environment","text":"Deactivating the virtualend allows you to use the system default python3 binaries. on Linux: bash deactivate Notes: Returns to the global Python environment. The command prompt should revert to its original state. Which Python? bash which python3 The result now should be /usr/bin/python3","title":"7. Deactivating the Virtual Environment:"},{"location":"virtualenv/#additional-resources","text":"Additional documentation can be foudn in the Official Documentation .","title":"Additional Resources:**"}]}